/**
 * =====================================================
 * DASHBOARD HOSPITALAR - ARCHIPELAGO V3.3 FINAL
 * =====================================================
 * 
 * Arquivo: dashboard-hospital.js
 * Vers√£o: V3.3 CORRIGIDO
 * Data: 20/Outubro/2025
 * 
 * Corre√ß√µes aplicadas:
 * ‚úÖ Gr√°fico Ocupa√ß√£o: Conta bloqueados corretamente
 * ‚úÖ Gr√°fico Previs√£o Alta: Ordem fixa conforme manual
 * ‚úÖ Gr√°fico PPS: Ordem fixa com %
 * ‚úÖ Gr√°fico Concess√µes: Cores robustas + logs
 * ‚úÖ Gr√°fico Linhas: Cores robustas + TOP 15 + logs
 * ‚úÖ Tabela: Campo Categoria adicionado
 * ‚úÖ KPIs: Taxa de ocupa√ß√£o considera bloqueados
 * ‚úÖ Funciona para TODOS os 5 hospitais (H1-H5)
 * 
 * Cliente: Guilherme Santoro
 * Desenvolvedor: Alessandro Rodrigues
 * =====================================================
 */

/**
 * =====================================================
 * FUN√á√ÉO PRINCIPAL: renderizarDashboardHospital
 * =====================================================
 * 
 * Renderiza dashboard completo de um hospital espec√≠fico
 * 
 * @param {string} hospitalId - ID do hospital (H1, H2, H3, H4, H5)
 * 
 * Estrutura:
 * 1. KPIs principais
 * 2. Gr√°fico: Ocupa√ß√£o (Vagos/Ocupados/Bloqueados)
 * 3. Gr√°fico: Previs√£o de Alta
 * 4. Gr√°fico: Distribui√ß√£o PPS
 * 5. Gr√°fico: Top 10 Concess√µes
 * 6. Gr√°fico: Top 15 Linhas de Cuidado
 * 7. Tabela: Lista completa de leitos
 */
window.renderizarDashboardHospital = function(hospitalId) {
    console.log(`üè• [DASHBOARD HOSPITAL] Renderizando para: ${hospitalId}`);
    
    // Validar hospitalId
    if (!hospitalId || !['H1', 'H2', 'H3', 'H4', 'H5'].includes(hospitalId)) {
        console.error('‚ùå [DASHBOARD HOSPITAL] Hospital inv√°lido:', hospitalId);
        alert('Erro: Hospital inv√°lido!');
        return;
    }
    
    // Buscar dados do hospital
    const hospital = window.hospitalData?.[hospitalId];
    
    if (!hospital) {
        console.error('‚ùå [DASHBOARD HOSPITAL] Dados n√£o encontrados para:', hospitalId);
        alert('Erro: Dados do hospital n√£o encontrados!');
        return;
    }
    
    const leitos = hospital.leitos || [];
    console.log(`üìä [DASHBOARD HOSPITAL] ${leitos.length} leitos carregados`);
    
    // =====================================================
    // SE√á√ÉO 1: CALCULAR KPIs
    // =====================================================
    
    const totalLeitos = leitos.length;
    const leitosVagos = leitos.filter(l => l.status === 'vago' && !l.bloqueado).length;
    const leitosOcupados = leitos.filter(l => l.status === 'ocupado').length;
    const leitosBloqueados = leitos.filter(l => l.bloqueado === true).length;
    
    // Taxa de ocupa√ß√£o: apenas sobre leitos dispon√≠veis (total - bloqueados)
    const leitosDisponiveis = totalLeitos - leitosBloqueados;
    const taxaOcupacao = leitosDisponiveis > 0 
        ? ((leitosOcupados / leitosDisponiveis) * 100).toFixed(1)
        : '0.0';
    
    console.log(`üìà [KPIs] Total: ${totalLeitos} | Vagos: ${leitosVagos} | Ocupados: ${leitosOcupados} | Bloqueados: ${leitosBloqueados} | Taxa: ${taxaOcupacao}%`);
    
    // =====================================================
    // SE√á√ÉO 2: MONTAR HTML DO DASHBOARD
    // =====================================================
    
    const container = document.getElementById('dashHospitalarContent');
    if (!container) {
        console.error('‚ùå [DASHBOARD HOSPITAL] Container n√£o encontrado!');
        return;
    }
    
    container.innerHTML = `
        <!-- HEADER -->
        <div class="dashboard-header">
            <div>
                <h2>${hospital.nome}</h2>
                <p class="subtitle">Dashboard Individual - ${totalLeitos} leitos</p>
            </div>
            <button onclick="window.exportarDashboardPDF('${hospitalId}')" class="btn-export">
                üì• Exportar PDF
            </button>
        </div>
        
        <!-- KPIs -->
        <div class="kpi-grid">
            <div class="kpi-card">
                <div class="kpi-icon">üè•</div>
                <div class="kpi-content">
                    <div class="kpi-label">Total de Leitos</div>
                    <div class="kpi-value">${totalLeitos}</div>
                </div>
            </div>
            
            <div class="kpi-card">
                <div class="kpi-icon" style="background: #10b981">‚úì</div>
                <div class="kpi-content">
                    <div class="kpi-label">Leitos Vagos</div>
                    <div class="kpi-value">${leitosVagos}</div>
                </div>
            </div>
            
            <div class="kpi-card">
                <div class="kpi-icon" style="background: #f59e0b">üë§</div>
                <div class="kpi-content">
                    <div class="kpi-label">Leitos Ocupados</div>
                    <div class="kpi-value">${leitosOcupados}</div>
                </div>
            </div>
            
            <div class="kpi-card">
                <div class="kpi-icon" style="background: #ef4444">üö´</div>
                <div class="kpi-content">
                    <div class="kpi-label">Leitos Bloqueados</div>
                    <div class="kpi-value">${leitosBloqueados}</div>
                </div>
            </div>
            
            <div class="kpi-card highlight">
                <div class="kpi-icon" style="background: #3b82f6">üìä</div>
                <div class="kpi-content">
                    <div class="kpi-label">Taxa de Ocupa√ß√£o</div>
                    <div class="kpi-value">${taxaOcupacao}%</div>
                    <div class="kpi-subtitle">Sobre ${leitosDisponiveis} dispon√≠veis</div>
                </div>
            </div>
        </div>
        
        <!-- GR√ÅFICOS -->
        <div class="charts-grid">
            <!-- Gr√°fico 1: Ocupa√ß√£o -->
            <div class="chart-card">
                <h3>Ocupa√ß√£o de Leitos</h3>
                <canvas id="chartOcupacao${hospitalId}"></canvas>
            </div>
            
            <!-- Gr√°fico 2: Previs√£o de Alta -->
            <div class="chart-card">
                <h3>Previs√£o de Alta</h3>
                <canvas id="chartPrevisaoAlta${hospitalId}"></canvas>
            </div>
            
            <!-- Gr√°fico 3: PPS -->
            <div class="chart-card">
                <h3>Distribui√ß√£o PPS</h3>
                <canvas id="chartPPS${hospitalId}"></canvas>
            </div>
            
            <!-- Gr√°fico 4: Concess√µes -->
            <div class="chart-card wide">
                <h3>Top 10 Concess√µes</h3>
                <canvas id="chartConcessoes${hospitalId}"></canvas>
            </div>
            
            <!-- Gr√°fico 5: Linhas de Cuidado -->
            <div class="chart-card wide">
                <h3>Top 15 Linhas de Cuidado</h3>
                <canvas id="chartLinhas${hospitalId}"></canvas>
            </div>
        </div>
        
        <!-- TABELA DE LEITOS -->
        <div class="table-container">
            <h3>Lista Completa de Leitos</h3>
            <table class="leitos-table">
                <thead>
                    <tr>
                        <th>Leito</th>
                        <th>Tipo</th>
                        <th>Status</th>
                        <th>Categoria</th>
                        <th>Paciente</th>
                        <th>Matr√≠cula</th>
                        <th>Idade</th>
                        <th>PPS</th>
                        <th>Previs√£o Alta</th>
                    </tr>
                </thead>
                <tbody id="tabelaLeitos${hospitalId}">
                    <!-- Preenchido via JS -->
                </tbody>
            </table>
        </div>
    `;
    
    // =====================================================
    // SE√á√ÉO 3: RENDERIZAR GR√ÅFICOS
    // =====================================================
    
    // GR√ÅFICO 1: OCUPA√á√ÉO
    renderizarGraficoOcupacao(hospitalId, leitosVagos, leitosOcupados, leitosBloqueados);
    
    // GR√ÅFICO 2: PREVIS√ÉO DE ALTA
    renderizarGraficoPrevisaoAlta(hospitalId, leitos);
    
    // GR√ÅFICO 3: PPS
    renderizarGraficoPPS(hospitalId, leitos);
    
    // GR√ÅFICO 4: CONCESS√ïES
    renderizarGraficoConcessoes(hospitalId, leitos);
    
    // GR√ÅFICO 5: LINHAS DE CUIDADO
    renderizarGraficoLinhas(hospitalId, leitos);
    
    // =====================================================
    // SE√á√ÉO 4: PREENCHER TABELA
    // =====================================================
    
    preencherTabelaLeitos(hospitalId, leitos);
    
    console.log('‚úÖ [DASHBOARD HOSPITAL] Renderizado com sucesso!');
};

/**
 * =====================================================
 * GR√ÅFICO 1: OCUPA√á√ÉO DE LEITOS
 * =====================================================
 * 
 * Pizza mostrando: Vagos / Ocupados / Bloqueados
 * 
 * CORRE√á√ÉO V3.3: Agora conta bloqueados corretamente
 */
function renderizarGraficoOcupacao(hospitalId, vagos, ocupados, bloqueados) {
    console.log(`üìä [GR√ÅFICO OCUPA√á√ÉO] ${hospitalId}: Vagos=${vagos}, Ocupados=${ocupados}, Bloqueados=${bloqueados}`);
    
    const ctx = document.getElementById(`chartOcupacao${hospitalId}`);
    if (!ctx) {
        console.error('‚ùå Canvas n√£o encontrado:', `chartOcupacao${hospitalId}`);
        return;
    }
    
    new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['Vagos', 'Ocupados', 'Bloqueados'],
            datasets: [{
                data: [vagos, ocupados, bloqueados],
                backgroundColor: [
                    '#10b981',  // Verde (vagos)
                    '#f59e0b',  // Laranja (ocupados)
                    '#ef4444'   // Vermelho (bloqueados)
                ],
                borderWidth: 2,
                borderColor: '#ffffff'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        padding: 15,
                        font: { size: 12 }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const label = context.label || '';
                            const value = context.parsed || 0;
                            const total = vagos + ocupados + bloqueados;
                            const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                            return `${label}: ${value} (${percentage}%)`;
                        }
                    }
                }
            }
        }
    });
}

/**
 * =====================================================
 * GR√ÅFICO 2: PREVIS√ÉO DE ALTA
 * =====================================================
 * 
 * Barra horizontal mostrando distribui√ß√£o de previs√µes
 * 
 * CORRE√á√ÉO V3.3: Ordem fixa conforme manual
 */
function renderizarGraficoPrevisaoAlta(hospitalId, leitos) {
    console.log(`üìä [GR√ÅFICO PREVIS√ÉO ALTA] ${hospitalId}`);
    
    const ctx = document.getElementById(`chartPrevisaoAlta${hospitalId}`);
    if (!ctx) {
        console.error('‚ùå Canvas n√£o encontrado:', `chartPrevisaoAlta${hospitalId}`);
        return;
    }
    
    // Ordem FIXA conforme manual (linha 143)
    const ordemCorreta = [
        'Hoje Ouro', 'Hoje Prata', 'Hoje Bronze',
        '24H', '48H', '72H', '96H', 'SP'
    ];
    
    // Contar por categoria
    const previsaoAltaData = {};
    ordemCorreta.forEach(cat => {
        previsaoAltaData[cat] = leitos.filter(l => 
            l.status === 'ocupado' && l.prevAlta === cat
        ).length;
    });
    
    // Filtrar apenas categorias com dados
    const labels = ordemCorreta.filter(cat => previsaoAltaData[cat] > 0);
    const valores = labels.map(cat => previsaoAltaData[cat]);
    
    console.log(`   Dados: ${JSON.stringify(Object.fromEntries(labels.map((l, i) => [l, valores[i]])))}`);
    
    // Cores por categoria
    const coresPrevisao = {
        'Hoje Ouro': '#FFD700',
        'Hoje Prata': '#C0C0C0',
        'Hoje Bronze': '#CD7F32',
        '24H': '#10b981',
        '48H': '#3b82f6',
        '72H': '#8b5cf6',
        '96H': '#f59e0b',
        'SP': '#6b7280'
    };
    
    const cores = labels.map(l => coresPrevisao[l] || '#999999');
    
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Pacientes',
                data: valores,
                backgroundColor: cores,
                borderColor: cores.map(c => c),
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: { display: false },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `${context.parsed.x} pacientes`;
                        }
                    }
                }
            },
            scales: {
                x: {
                    beginAtZero: true,
                    ticks: { stepSize: 1 }
                }
            }
        }
    });
}

/**
 * =====================================================
 * GR√ÅFICO 3: DISTRIBUI√á√ÉO PPS
 * =====================================================
 * 
 * Barra vertical mostrando distribui√ß√£o de PPS
 * 
 * CORRE√á√ÉO V3.3: Ordem fixa com % (manual linha 195)
 */
function renderizarGraficoPPS(hospitalId, leitos) {
    console.log(`üìä [GR√ÅFICO PPS] ${hospitalId}`);
    
    const ctx = document.getElementById(`chartPPS${hospitalId}`);
    if (!ctx) {
        console.error('‚ùå Canvas n√£o encontrado:', `chartPPS${hospitalId}`);
        return;
    }
    
    // Ordem FIXA com %
    const ppsOrdem = [
        '10%', '20%', '30%', '40%', '50%',
        '60%', '70%', '80%', '90%', '100%'
    ];
    
    // Contar por categoria
    const ppsData = {};
    ppsOrdem.forEach(pps => {
        ppsData[pps] = leitos.filter(l => 
            l.status === 'ocupado' && l.pps === pps
        ).length;
    });
    
    // Filtrar apenas PPS com dados
    const labels = ppsOrdem.filter(pps => ppsData[pps] > 0);
    const valores = labels.map(pps => ppsData[pps]);
    
    console.log(`   Dados: ${JSON.stringify(Object.fromEntries(labels.map((l, i) => [l, valores[i]])))}`);
    
    // Gradiente de cores (verde ‚Üí vermelho)
    const cores = labels.map((pps, idx) => {
        const percent = parseInt(pps);
        if (percent <= 30) return '#ef4444'; // Vermelho (pior)
        if (percent <= 50) return '#f59e0b'; // Laranja
        if (percent <= 70) return '#eab308'; // Amarelo
        return '#10b981'; // Verde (melhor)
    });
    
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Pacientes',
                data: valores,
                backgroundColor: cores,
                borderColor: cores,
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: { display: false },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `PPS ${context.label}: ${context.parsed.y} pacientes`;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: { stepSize: 1 }
                }
            }
        }
    });
}

/**
 * =====================================================
 * GR√ÅFICO 4: TOP 10 CONCESS√ïES
 * =====================================================
 * 
 * Barra horizontal mostrando concess√µes mais frequentes
 * 
 * CORRE√á√ÉO V3.3: Cores robustas + logs de debug
 */
function renderizarGraficoConcessoes(hospitalId, leitos) {
    console.log(`üìä [GR√ÅFICO CONCESS√ïES] ${hospitalId}`);
    
    const ctx = document.getElementById(`chartConcessoes${hospitalId}`);
    if (!ctx) {
        console.error('‚ùå Canvas n√£o encontrado:', `chartConcessoes${hospitalId}`);
        return;
    }
    
    // Lista COMPLETA de concess√µes (para garantir ordem)
    const concessoesOrdenadas = window.CONCESSOES_LISTA || [
        "Transi√ß√£o Domiciliar",
        "Aplica√ß√£o domiciliar de medicamentos",
        "Aspira√ß√£o",
        "Banho",
        "Curativo",
        "Curativo PICC",
        "Fisioterapia Domiciliar",
        "Fonoaudiologia Domiciliar",
        "Oxigenoterapia",
        "Remo√ß√£o",
        "Solicita√ß√£o domiciliar de exames"
    ];
    
    // Contar ocorr√™ncias
    const concessoesCount = {};
    concessoesOrdenadas.forEach(c => concessoesCount[c] = 0);
    
    leitos
        .filter(l => l.status === 'ocupado' && Array.isArray(l.concessoes))
        .forEach(l => {
            l.concessoes.forEach(concessao => {
                if (concessoesCount.hasOwnProperty(concessao)) {
                    concessoesCount[concessao]++;
                } else {
                    console.warn(`‚ö†Ô∏è [CONCESS√ïES] Concess√£o desconhecida: "${concessao}"`);
                }
            });
        });
    
    // Ordenar por frequ√™ncia (top 10)
    const sortedConcessoes = Object.entries(concessoesCount)
        .filter(([_, count]) => count > 0)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10);
    
    if (sortedConcessoes.length === 0) {
        console.log('   ‚ÑπÔ∏è Nenhuma concess√£o registrada');
        ctx.getContext('2d').clearRect(0, 0, ctx.width, ctx.height);
        return;
    }
    
    const labels = sortedConcessoes.map(([nome]) => nome);
    const valores = sortedConcessoes.map(([_, count]) => count);
    
    console.log(`   Top 10: ${labels.join(', ')}`);
    
    // Buscar cores com FALLBACK ROBUSTO
    const cores = sortedConcessoes.map(([concessao]) => {
        const cor = window.CORES_CONCESSOES?.[concessao];
        
        if (!cor) {
            console.warn(`‚ö†Ô∏è [CORES] Concess√£o sem cor definida: "${concessao}"`);
            return '#999999';
        }
        
        return cor;
    });
    
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Pacientes',
                data: valores,
                backgroundColor: cores,
                borderColor: cores,
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: { display: false },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `${context.parsed.x} pacientes`;
                        }
                    }
                }
            },
            scales: {
                x: {
                    beginAtZero: true,
                    ticks: { stepSize: 1 }
                }
            }
        }
    });
}

/**
 * =====================================================
 * GR√ÅFICO 5: TOP 15 LINHAS DE CUIDADO
 * =====================================================
 * 
 * Barra horizontal mostrando linhas mais frequentes
 * 
 * CORRE√á√ÉO V3.3: Cores robustas + TOP 15 + logs de debug
 */
function renderizarGraficoLinhas(hospitalId, leitos) {
    console.log(`üìä [GR√ÅFICO LINHAS] ${hospitalId}`);
    
    const ctx = document.getElementById(`chartLinhas${hospitalId}`);
    if (!ctx) {
        console.error('‚ùå Canvas n√£o encontrado:', `chartLinhas${hospitalId}`);
        return;
    }
    
    // Lista COMPLETA de linhas (para garantir ordem)
    const linhasOrdenadas = window.LINHAS_CUIDADO_LISTA || [
        "Assiste",
        "APS SP",
        "Cuidados Paliativos",
        "ICO (Insufici√™ncia Coronariana)",
        "Nexus SP Cardiologia",
        "Nexus SP Gastroentereologia",
        "Nexus SP Geriatria",
        "Nexus SP Pneumologia",
        "Nexus SP Psiquiatria",
        "Nexus SP Reumatologia",
        "Nexus SP Sa√∫de do F√≠gado",
        "Generalista",
        "Bucomaxilofacial",
        "Cardiologia",
        "Cirurgia Card√≠aca",
        "Cirurgia de Cabe√ßa e Pesco√ßo",
        "Cirurgia do Aparelho Digestivo",
        "Cirurgia Geral",
        "Cirurgia Oncol√≥gica",
        "Cirurgia Pl√°stica",
        "Cirurgia Tor√°cica",
        "Cirurgia Vascular",
        "Cl√≠nica M√©dica",
        "Coloproctologia",
        "Dermatologia",
        "Endocrinologia",
        "Fisiatria",
        "Gastroenterologia",
        "Geriatria",
        "Ginecologia e Obstetr√≠cia",
        "Hematologia",
        "Infectologia",
        "Mastologia",
        "Nefrologia",
        "Neurocirurgia",
        "Neurologia",
        "Oftalmologia",
        "Oncologia Cl√≠nica",
        "Ortopedia",
        "Otorrinolaringologia",
        "Pediatria",
        "Pneumologia",
        "Psiquiatria",
        "Reumatologia",
        "Urologia"
    ];
    
    // Contar ocorr√™ncias
    const linhasCount = {};
    linhasOrdenadas.forEach(l => linhasCount[l] = 0);
    
    leitos
        .filter(l => l.status === 'ocupado' && Array.isArray(l.linhas))
        .forEach(l => {
            l.linhas.forEach(linha => {
                if (linhasCount.hasOwnProperty(linha)) {
                    linhasCount[linha]++;
                } else {
                    console.warn(`‚ö†Ô∏è [LINHAS] Linha desconhecida: "${linha}"`);
                }
            });
        });
    
    // Ordenar por frequ√™ncia (top 15)
    const sortedLinhas = Object.entries(linhasCount)
        .filter(([_, count]) => count > 0)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15);
    
    if (sortedLinhas.length === 0) {
        console.log('   ‚ÑπÔ∏è Nenhuma linha de cuidado registrada');
        ctx.getContext('2d').clearRect(0, 0, ctx.width, ctx.height);
        return;
    }
    
    const labels = sortedLinhas.map(([nome]) => nome);
    const valores = sortedLinhas.map(([_, count]) => count);
    
    console.log(`   Top 15: ${labels.join(', ')}`);
    
    // Buscar cores com FALLBACK ROBUSTO
    const cores = sortedLinhas.map(([linha]) => {
        const cor = window.CORES_LINHAS?.[linha];
        
        if (!cor) {
            console.warn(`‚ö†Ô∏è [CORES] Linha sem cor definida: "${linha}"`);
            return '#999999';
        }
        
        return cor;
    });
    
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Pacientes',
                data: valores,
                backgroundColor: cores,
                borderColor: cores,
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: true,
            plugins: {
                legend: { display: false },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `${context.parsed.x} pacientes`;
                        }
                    }
                }
            },
            scales: {
                x: {
                    beginAtZero: true,
                    ticks: { stepSize: 1 }
                }
            }
        }
    });
}

/**
 * =====================================================
 * PREENCHER TABELA DE LEITOS
 * =====================================================
 * 
 * Mostra todos os leitos com detalhes
 * 
 * CORRE√á√ÉO V3.3: Campo Categoria adicionado
 */
function preencherTabelaLeitos(hospitalId, leitos) {
    console.log(`üìã [TABELA LEITOS] ${hospitalId}`);
    
    const tbody = document.getElementById(`tabelaLeitos${hospitalId}`);
    if (!tbody) {
        console.error('‚ùå Tbody n√£o encontrado:', `tabelaLeitos${hospitalId}`);
        return;
    }
    
    tbody.innerHTML = '';
    
    // Ordenar leitos por n√∫mero
    const leitosOrdenados = [...leitos].sort((a, b) => {
        const numA = parseInt(a.leito) || 0;
        const numB = parseInt(b.leito) || 0;
        return numA - numB;
    });
    
    leitosOrdenados.forEach(leito => {
        // Determinar categoria
        let categoria = '';
        if (leito.tipo === 'H√≠brido') {
            // Para h√≠bridos, usar categoria escolhida pelo m√©dico
            categoria = leito.categoria || leito.categoriaEscolhida || '-';
        } else if (leito.tipo === 'APTO') {
            categoria = 'Apartamento';
        } else if (leito.tipo === 'ENFERMARIA') {
            categoria = 'Enfermaria';
        } else {
            categoria = leito.tipo || '-';
        }
        
        // Determinar status visual
        let statusTexto = 'Vago';
        let statusClass = 'vago';
        
        if (leito.bloqueado) {
            statusTexto = 'Bloqueado';
            statusClass = 'bloqueado';
        } else if (leito.status === 'ocupado') {
            statusTexto = 'Ocupado';
            statusClass = 'ocupado';
        }
        
        const row = document.createElement('tr');
        row.innerHTML = `
            <td><strong>${leito.leito}</strong></td>
            <td>${leito.tipo || '-'}</td>
            <td>
                <span class="status-badge status-${statusClass}">
                    ${statusTexto}
                </span>
            </td>
            <td><strong>${categoria}</strong></td>
            <td>${leito.nome || '-'}</td>
            <td>${leito.matricula || '-'}</td>
            <td>${leito.idade || '-'}</td>
            <td>${leito.pps || '-'}</td>
            <td>${leito.prevAlta || '-'}</td>
        `;
        
        tbody.appendChild(row);
    });
    
    console.log(`   ‚úÖ ${leitosOrdenados.length} linhas adicionadas`);
}

/**
 * =====================================================
 * EXPORTAR DASHBOARD PARA PDF
 * =====================================================
 * 
 * TODO: Implementar exporta√ß√£o via jsPDF ou html2canvas
 */
window.exportarDashboardPDF = function(hospitalId) {
    console.log(`üì• [EXPORTAR PDF] ${hospitalId}`);
    alert('Funcionalidade de exporta√ß√£o em desenvolvimento!');
};

/**
 * =====================================================
 * LOG DE INICIALIZA√á√ÉO
 * =====================================================
 */
console.log('‚úÖ [DASHBOARD HOSPITAL] M√≥dulo carregado - V3.3 CORRIGIDO');
console.log('   ‚Ä¢ 5 hospitais suportados: H1, H2, H3, H4, H5');
console.log('   ‚Ä¢ 5 gr√°ficos: Ocupa√ß√£o, Previs√£o Alta, PPS, Concess√µes (Top 10), Linhas (Top 15)');
console.log('   ‚Ä¢ Tabela completa com campo Categoria');
console.log('   ‚Ä¢ Cores robustas com fallback');
console.log('   ‚Ä¢ Logs de debug habilitados');
