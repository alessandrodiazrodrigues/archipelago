// =================== CARDS.JS V3.3 FINAL - ESTRUTURA MOCKUP APROVADA ===================
// =================== LAYOUT: HOSPITAL FORA DOS BOXES + LINHA DIVIS√ìRIA + C√çRCULO PESSOA ===================
// =================== LISTAS FINAIS: 11 CONCESS√ïES + 45 LINHAS + DIRETIVAS (BV/73) ===================

// =================== VARI√ÅVEIS GLOBAIS ===================  
window.selectedLeito = null;
window.currentHospital = 'H1';

// =================== MAPEAMENTO DE HOSPITAIS V3.3 ===================
window.HOSPITAL_MAPPING = {
    H1: 'Neomater',
    H2: 'Cruz Azul', 
    H3: 'Santa Marcelina',
    H4: 'Santa Clara',
    H5: 'Adventista'
};

// ‚≠ê NOVO V3.3: IDENTIFICAR HOSPITAIS H√çBRIDOS
window.HOSPITAIS_HIBRIDOS = ['H1', 'H3', 'H5'];

// ‚≠ê NOVO V3.3: MAPEAMENTO DE TIPOS DE LEITO POR HOSPITAL
window.LEITOS_APARTAMENTO = {
    'H2': 'all', // Cruz Azul: 20 apartamentos
    'H4': [1, 2, 3, 4, 5, 6, 7, 8, 9] // Santa Clara: 9 apartamentos espec√≠ficos
};

window.LEITOS_ENFERMARIA = {
    'H4': [10, 11, 12, 13] // Santa Clara: 4 enfermarias espec√≠ficas
};

// ‚≠ê NOVO V3.3: TIPO DE QUARTO (2 OP√á√ïES - APENAS PARA H√çBRIDOS)
window.TIPO_QUARTO_OPTIONS = ['Apartamento', 'Enfermaria'];

// =================== LISTAS FINAIS CONFIRMADAS V3.3 ===================

// CONCESS√ïES: 11 ITENS (ORDEM CONFIRMADA)
window.CONCESSOES_LIST = [
    "Transi√ß√£o Domiciliar",
    "Aplica√ß√£o domiciliar de medicamentos",
    "Aspira√ß√£o",
    "Banho",
    "Curativo",
    "Curativo PICC",
    "Fisioterapia Domiciliar",
    "Fonoaudiologia Domiciliar",
    "Oxigenoterapia",
    "Remo√ß√£o",
    "Solicita√ß√£o domiciliar de exames"
];

// LINHAS DE CUIDADO: 45 ESPECIALIDADES (ORDEM CONFIRMADA)
window.LINHAS_CUIDADO_LIST = [
    "Assiste",
    "APS SP",
    "Cuidados Paliativos",
    "ICO (Insufici√™ncia Coronariana)",
    "Nexus SP Cardiologia",
    "Nexus SP Gastroentereologia",
    "Nexus SP Geriatria",
    "Nexus SP Pneumologia",
    "Nexus SP Psiquiatria",
    "Nexus SP Reumatologia",
    "Nexus SP Sa√∫de do F√≠gado",
    "Generalista",
    "Bucomaxilofacial",
    "Cardiologia",
    "Cirurgia Card√≠aca",
    "Cirurgia de Cabe√ßa e Pesco√ßo",
    "Cirurgia do Aparelho Digestivo",
    "Cirurgia Geral",
    "Cirurgia Oncol√≥gica",
    "Cirurgia Pl√°stica",
    "Cirurgia Tor√°cica",
    "Cirurgia Vascular",
    "Cl√≠nica M√©dica",
    "Coloproctologia",
    "Dermatologia",
    "Endocrinologia",
    "Fisiatria",
    "Gastroenterologia",
    "Geriatria",
    "Ginecologia e Obstetr√≠cia",
    "Hematologia",
    "Infectologia",
    "Mastologia",
    "Nefrologia",
    "Neurocirurgia",
    "Neurologia",
    "Oftalmologia",
    "Oncologia Cl√≠nica",
    "Ortopedia",
    "Otorrinolaringologia",
    "Pediatria",
    "Pneumologia",
    "Psiquiatria",
    "Reumatologia",
    "Urologia"
];

// PPS: 10 OP√á√ïES
window.PPS_OPTIONS = ['10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'];

// PREVIS√ÉO DE ALTA: 10 OP√á√ïES
window.PREVISAO_ALTA_OPTIONS = [
    'Hoje Ouro', 'Hoje 2R', 'Hoje 3R',
    '24h Ouro', '24h 2R', '24h 3R', 
    '48h', '72h', '96h', 'SP'
];

// ISOLAMENTO: 3 OP√á√ïES
window.ISOLAMENTO_OPTIONS = [
    'N√£o Isolamento',
    'Isolamento de Contato', 
    'Isolamento Respirat√≥rio'
];

// REGI√ÉO: 9 OP√á√ïES (CONFIRMADAS)
window.REGIAO_OPTIONS = [
    'Zona Central',
    'Zona Sul',
    'Zona Norte',
    'Zona Leste',
    'Zona Oeste',
    'ABC',
    'Guarulhos',
    'Osasco',
    'Outra'
];

// G√äNERO: 2 OP√á√ïES (POR EXTENSO CONFIRMADO)
window.SEXO_OPTIONS = [
    'Masculino',
    'Feminino'
];

// ‚≠ê NOVO V3.3: DIRETIVAS ANTECIPADAS (BV/73)
window.DIRETIVAS_OPTIONS = [
    'N√£o se aplica',
    'Sim',
    'N√£o'
];

// IDADE: DROPDOWN 14-115 ANOS
window.IDADE_OPTIONS = [];
for (let i = 14; i <= 115; i++) {
    window.IDADE_OPTIONS.push(i);
}

// =================== FUN√á√ÉO AUXILIAR: DETERMINAR TIPO DE LEITO ===================
function getTipoLeitoFixo(hospitalId, numeroLeito) {
    // Se for hospital h√≠brido, n√£o h√° tipo fixo
    if (window.HOSPITAIS_HIBRIDOS.includes(hospitalId)) {
        return null; // Tipo ser√° escolhido pelo m√©dico
    }
    
    // H2 - Cruz Azul: todos s√£o apartamentos
    if (hospitalId === 'H2') {
        return 'Apartamento';
    }
    
    // H4 - Santa Clara: verificar n√∫mero do leito
    if (hospitalId === 'H4') {
        const num = parseInt(numeroLeito);
        if (window.LEITOS_APARTAMENTO['H4'].includes(num)) {
            return 'Apartamento';
        } else if (window.LEITOS_ENFERMARIA['H4'].includes(num)) {
            return 'Enfermaria';
        }
    }
    
    return null;
}

// =================== FUN√á√ÉO: SELECT HOSPITAL ===================
window.selectHospital = function(hospitalId) {
    logInfo(`Selecionando hospital: ${hospitalId} (${window.HOSPITAL_MAPPING[hospitalId]})`);
    
    window.currentHospital = hospitalId;
    
    // Atualizar bot√µes visuais
    document.querySelectorAll('.hospital-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.hospital === hospitalId) {
            btn.classList.add('active');
        }
    });
    
    window.renderCards();
    
    logSuccess(`Hospital selecionado: ${window.HOSPITAL_MAPPING[hospitalId]}`);
};

// =================== FUN√á√ÉO PRINCIPAL DE RENDERIZA√á√ÉO ===================
window.renderCards = function() {
    logInfo('Renderizando cards V3.3 FINAL - layout MOCKUP + DIRETIVAS');
    
    const container = document.getElementById('cardsContainer');
    if (!container) {
        logError('Container cardsContainer n√£o encontrado');
        return;
    }

    container.innerHTML = '';
    const hospitalId = window.currentHospital || 'H1';
    const hospital = window.hospitalData[hospitalId];
    
    const hospitalNome = window.HOSPITAL_MAPPING[hospitalId] || 'Hospital';
    
    if (!hospital || !hospital.leitos || hospital.leitos.length === 0) {
        container.innerHTML = `
            <div class="card" style="grid-column: 1 / -1; text-align: center; padding: 40px;">
                <div style="color: #60a5fa; margin-bottom: 15px;">
                    <h3>üìã ${hospitalNome}</h3>
                </div>
                <div style="background: rgba(96,165,250,0.1); border-radius: 8px; padding: 20px;">
                    <p style="margin-bottom: 15px;">Carregando dados da planilha V3.3...</p>
                    <p style="color: #28a745;"><em>‚úÖ API V3.3 conectada - 74 colunas + DIRETIVAS (BV/73)</em></p>
                </div>
            </div>
        `;
        return;
    }
    
    hospital.leitos.forEach(leito => {
        const card = createCard(leito, hospitalNome);
        container.appendChild(card);
    });
    
    logInfo(`${hospital.leitos.length} cards V3.3 FINAL renderizados para ${hospitalNome}`);
};

// =================== FUN√á√ÉO: BADGE DE ISOLAMENTO ===================
function getBadgeIsolamento(isolamento) {
    if (!isolamento || isolamento === 'N√£o Isolamento') {
        return {
            cor: '#9ca3af',
            texto: 'N√£o Isol',
            textoCor: '#ffffff'
        };
    } else if (isolamento === 'Isolamento de Contato') {
        return {
            cor: '#f59e0b',
            texto: 'Contato',
            textoCor: '#000000'
        };
    } else if (isolamento === 'Isolamento Respirat√≥rio') {
        return {
            cor: '#ef4444',
            texto: 'Respirat√≥rio',
            textoCor: '#ffffff'
        };
    }
    return getBadgeIsolamento('N√£o Isolamento');
}

// =================== FUN√á√ÉO: BADGE DE G√äNERO ===================
function getBadgeGenero(sexo) {
    if (sexo === 'Masculino') {
        return {
            cor: 'rgba(59,130,246,0.2)',
            borda: '#3b82f6',
            textoCor: '#60a5fa',
            texto: 'Masculino'
        };
    } else if (sexo === 'Feminino') {
        return {
            cor: 'rgba(236,72,153,0.2)',
            borda: '#ec4899',
            textoCor: '#ec4899',
            texto: 'Feminino'
        };
    }
    return {
        cor: 'rgba(255,255,255,0.05)',
        borda: 'rgba(255,255,255,0.1)',
        textoCor: '#ffffff',
        texto: '-'
    };
}

// =================== FUN√á√ÉO: BADGE DE DIRETIVAS ===================
function getBadgeDiretivas(diretivas) {
    if (!diretivas || diretivas === 'N√£o se aplica') {
        return {
            cor: 'rgba(156,163,175,0.2)',
            borda: '#9ca3af',
            textoCor: '#9ca3af',
            texto: 'N/A'
        };
    } else if (diretivas === 'Sim') {
        return {
            cor: 'rgba(34,197,94,0.2)',
            borda: '#22c55e',
            textoCor: '#22c55e',
            texto: 'Sim'
        };
    } else if (diretivas === 'N√£o') {
        return {
            cor: 'rgba(239,68,68,0.2)',
            borda: '#ef4444',
            textoCor: '#ef4444',
            texto: 'N√£o'
        };
    }
    return getBadgeDiretivas('N√£o se aplica');
}

// =================== FUN√á√ÉO: FORMATA√á√ÉO MATR√çCULA ===================
function formatarMatricula(valor) {
    if (!valor) return '';
    let numeros = valor.replace(/\D/g, '');
    if (numeros.length > 5) {
        numeros = numeros.substring(0, 5);
    }
    if (numeros.length === 0) return '';
    if (numeros.length <= 5) {
        return numeros + '-0';
    }
    return numeros.substring(0, 5) + '-' + numeros.substring(5, 6);
}

// =================== FUN√á√ÉO: CALCULAR TEMPO INTERNADO ===================
function calcularTempoInternado(dataAdmissao) {
    if (!dataAdmissao) return '-';
    
    try {
        const partes = dataAdmissao.split(' ');
        if (partes.length < 2) return '-';
        
        const [dia, mes, ano] = partes[0].split('/');
        const [hora, minuto] = partes[1].split(':');
        
        const admissao = new Date(ano, mes - 1, dia, hora, minuto);
        const agora = new Date();
        
        const diffMs = agora - admissao;
        const diffHoras = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDias = Math.floor(diffHoras / 24);
        const horasRestantes = diffHoras % 24;
        
        if (diffDias === 0) {
            return `${diffHoras}h`;
        } else if (diffDias === 1) {
            return `1d ${horasRestantes}h`;
        } else {
            return `${diffDias}d ${horasRestantes}h`;
        }
    } catch (e) {
        return '-';
    }
}

// =================== FUN√á√ÉO: CRIAR CARD V3.3 FINAL (MOCKUP) ===================
function createCard(leito, hospitalNome) {
    const card = document.createElement('div');
    card.className = 'card';
    
    const isOcupado = leito.status === 'OCUPADO';
    const badgeIsolamento = getBadgeIsolamento(leito.isolamento);
    const badgeGenero = getBadgeGenero(leito.genero);
    const badgeDiretivas = getBadgeDiretivas(leito.diretivas);
    
    // Determinar tipo do leito
    let tipoDisplay = 'H√≠brido';
    const tipoFixo = getTipoLeitoFixo(leito.hospital, leito.numero);
    
    if (tipoFixo) {
        // Leito tem tipo fixo (H2 ou H4)
        tipoDisplay = tipoFixo;
    } else if (window.HOSPITAIS_HIBRIDOS.includes(leito.hospital)) {
        // Leito h√≠brido - mostrar escolha do m√©dico se ocupado
        if (isOcupado && leito.categoriaEscolhida) {
            tipoDisplay = leito.categoriaEscolhida;
        } else {
            tipoDisplay = 'H√≠brido';
        }
    }
    
    // Indicador de hospital h√≠brido
    const isHospitalHibrido = window.HOSPITAIS_HIBRIDOS.includes(leito.hospital);
    const indicadorHibrido = isHospitalHibrido ? ' | LEITO H√çBRIDO' : '';
    
    let cardContent = '';

    if (isOcupado) {
        const corCirculo = leito.pps ? 
            (parseInt(leito.pps) <= 30 ? '#22c55e' : 
             parseInt(leito.pps) <= 70 ? '#60a5fa' : '#ec4899') : '#9ca3af';
        
        const tempoInternado = calcularTempoInternado(leito.dataAdmissao);
        
        cardContent = `
            <div style="color: #60a5fa; font-size: 12px; font-weight: 600; margin-bottom: 10px; text-align: left;">
                Hospital: ${hospitalNome} | ID: ${leito.idLeito || '-'} | Leito: ${leito.numero || '-'}${indicadorHibrido}
            </div>
            
            <div class="card-row">
                <div class="card-box">
                    <div class="card-label">Leito</div>
                    <div class="card-value">${leito.numero || '-'}</div>
                </div>
                <div class="card-box">
                    <div class="card-label">Tipo</div>
                    <div class="card-value">${tipoDisplay}</div>
                </div>
                <div class="card-box" style="background: linear-gradient(135deg, rgba(34,197,94,0.15) 0%, rgba(16,185,129,0.05) 100%); border: 1px solid rgba(34,197,94,0.3);">
                    <div class="card-label" style="color: #22c55e;">Status</div>
                    <div class="card-value" style="color: #22c55e; font-weight: 700;">OCUPADO</div>
                </div>
            </div>
            
            <div class="card-row">
                <div class="card-box" style="background: ${badgeGenero.cor}; border: 1px solid ${badgeGenero.borda};">
                    <div class="card-label" style="color: ${badgeGenero.textoCor};">G√™nero</div>
                    <div class="card-value" style="color: ${badgeGenero.textoCor}; font-weight: 600;">${badgeGenero.texto}</div>
                </div>
                <div class="card-box" style="background: ${badgeIsolamento.cor}; border: none;">
                    <div class="card-label" style="color: ${badgeIsolamento.textoCor};">Isolamento</div>
                    <div class="card-value" style="color: ${badgeIsolamento.textoCor}; font-weight: 600;">${badgeIsolamento.texto}</div>
                </div>
                <div class="card-box">
                    <div class="card-label">Prev Alta</div>
                    <div class="card-value">${leito.previsaoAlta || '-'}</div>
                </div>
            </div>
            
            <div style="height: 1px; background: rgba(255,255,255,0.1); margin: 12px 0;"></div>
            
            <div class="card-row-pessoa">
                <div class="pessoa-circle" style="border: 3px solid ${corCirculo}; background: ${corCirculo};">
                    <svg viewBox="0 0 24 24" fill="white" style="width: 50px; height: 50px;">
                        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                    </svg>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px;">
                    <div class="card-box">
                        <div class="card-label">Nome</div>
                        <div class="card-value">${leito.nome || '-'}</div>
                    </div>
                    <div class="card-box">
                        <div class="card-label">Idade</div>
                        <div class="card-value">${leito.idade || '-'}</div>
                    </div>
                    <div class="card-box">
                        <div class="card-label">Matr√≠cula</div>
                        <div class="card-value">${leito.matricula || '-'}</div>
                    </div>
                    <div class="card-box">
                        <div class="card-label">Conv√™nio</div>
                        <div class="card-value">${leito.convenio || '-'}</div>
                    </div>
                </div>
            </div>
            
            <div class="card-row">
                <div class="card-box">
                    <div class="card-label">PPS</div>
                    <div class="card-value">${leito.pps || '-'}</div>
                </div>
                <div class="card-box">
                    <div class="card-label">SPICT-BR</div>
                    <div class="card-value">${leito.spictbr === true ? 'Sim' : leito.spictbr === false ? 'N√£o' : '-'}</div>
                </div>
                <div class="card-box" style="background: ${badgeDiretivas.cor}; border: 1px solid ${badgeDiretivas.borda};">
                    <div class="card-label" style="color: ${badgeDiretivas.textoCor};">Diretivas</div>
                    <div class="card-value" style="color: ${badgeDiretivas.textoCor}; font-weight: 600;">${badgeDiretivas.texto}</div>
                </div>
            </div>
            
            <div style="display: flex; gap: 8px; margin-top: 12px;">
                <button onclick="openAtualizacaoModal('${leito.hospital}', ${leito.numero})" 
                        class="btn-secondary" style="flex: 1;">
                    Atualizar
                </button>
                <button onclick="darAlta('${leito.hospital}', ${leito.numero}, '${hospitalNome}')" 
                        class="btn-danger" style="flex: 1;">
                    Dar Alta
                </button>
            </div>
        `;
    } else {
        cardContent = `
            <div style="color: #60a5fa; font-size: 12px; font-weight: 600; margin-bottom: 10px; text-align: left;">
                Hospital: ${hospitalNome} | ID: ${leito.idLeito || '-'} | Leito: ${leito.numero || '-'}${indicadorHibrido}
            </div>
            
            <div class="card-row">
                <div class="card-box">
                    <div class="card-label">Leito</div>
                    <div class="card-value">${leito.numero || '-'}</div>
                </div>
                <div class="card-box">
                    <div class="card-label">Tipo</div>
                    <div class="card-value">${tipoDisplay}</div>
                </div>
                <div class="card-box" style="background: linear-gradient(135deg, rgba(251,191,36,0.15) 0%, rgba(245,158,11,0.05) 100%); border: 1px solid rgba(251,191,36,0.3);">
                    <div class="card-label" style="color: #fbbf24;">Status</div>
                    <div class="card-value" style="color: #fbbf24; font-weight: 700;">VAGO</div>
                </div>
            </div>
            
            <div class="card-row">
                <div class="card-box">
                    <div class="card-label">G√™nero</div>
                    <div class="card-value">-</div>
                </div>
                <div class="card-box">
                    <div class="card-label">Isolamento</div>
                    <div class="card-value">-</div>
                </div>
                <div class="card-box">
                    <div class="card-label">Prev Alta</div>
                    <div class="card-value">-</div>
                </div>
            </div>
            
            <div style="height: 1px; background: rgba(255,255,255,0.1); margin: 12px 0;"></div>
            
            <div class="card-row-pessoa">
                <div class="pessoa-circle" style="border: 3px solid #4b5563; background: #374151;">
                    <svg viewBox="0 0 24 24" fill="#6b7280" style="width: 50px; height: 50px;">
                        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                    </svg>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px;">
                    <div class="card-box">
                        <div class="card-label">Nome</div>
                        <div class="card-value">-</div>
                    </div>
                    <div class="card-box">
                        <div class="card-label">Idade</div>
                        <div class="card-value">-</div>
                    </div>
                    <div class="card-box">
                        <div class="card-label">Matr√≠cula</div>
                        <div class="card-value">-</div>
                    </div>
                    <div class="card-box">
                        <div class="card-label">Conv√™nio</div>
                        <div class="card-value">-</div>
                    </div>
                </div>
            </div>
            
            <div class="card-row">
                <div class="card-box">
                    <div class="card-label">PPS</div>
                    <div class="card-value">-</div>
                </div>
                <div class="card-box">
                    <div class="card-label">SPICT-BR</div>
                    <div class="card-value">-</div>
                </div>
                <div class="card-box">
                    <div class="card-label">Diretivas</div>
                    <div class="card-value">-</div>
                </div>
            </div>
            
            <button onclick="openAdmissaoModal('${leito.hospital}', ${leito.numero})" 
                    class="btn-primary" style="width: 100%; margin-top: 12px;">
                Admitir Paciente
            </button>
        `;
    }
    
    card.innerHTML = cardContent;
    return card;
}

// =================== FUN√á√ÉO: ABRIR MODAL DE ADMISS√ÉO ===================
function openAdmissaoModal(hospitalId, numeroLeito) {
    logInfo(`Abrindo modal de admiss√£o - Hospital: ${hospitalId}, Leito: ${numeroLeito}`);
    
    window.selectedLeito = { hospital: hospitalId, numero: numeroLeito };
    const hospitalNome = window.HOSPITAL_MAPPING[hospitalId] || 'Hospital';
    
    // Buscar ID do leito na planilha
    let idLeito = '-';
    const hospital = window.hospitalData[hospitalId];
    if (hospital && hospital.leitos) {
        const leito = hospital.leitos.find(l => l.numero === numeroLeito);
        if (leito && leito.idLeito) {
            idLeito = leito.idLeito;
        }
    }
    
    // Determinar se √© leito h√≠brido e se tem tipo fixo
    const isHospitalHibrido = window.HOSPITAIS_HIBRIDOS.includes(hospitalId);
    const tipoFixo = getTipoLeitoFixo(hospitalId, numeroLeito);
    const indicadorHibrido = isHospitalHibrido ? ' | LEITO H√çBRIDO' : '';
    
    // Campo Categoria (apenas para leitos h√≠bridos)
    let campoCategoriaHTML = '';
    if (isHospitalHibrido && !tipoFixo) {
        campoCategoriaHTML = `
            <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                Categoria do Leito: <span style="color: #ef4444;">*</span>
            </label>
            <select id="admitCategoria" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px; margin-bottom: 15px;">
                <option value="">Selecione...</option>
                ${window.TIPO_QUARTO_OPTIONS.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
            </select>
        `;
    }
    
    const modalHTML = `
        <div class="modal-overlay" id="admissaoModal">
            <div class="modal-content" style="max-width: 900px; max-height: 90vh; overflow-y: auto;">
                <div style="color: #60a5fa; font-size: 14px; font-weight: 600; margin-bottom: 20px; text-align: left;">
                    Hospital: ${hospitalNome} | ID: ${idLeito} | Leito: ${numeroLeito}${indicadorHibrido}
                </div>
                
                <h2 style="color: #60a5fa; margin-bottom: 20px; text-align: center;">Admitir Paciente</h2>
                
                ${campoCategoriaHTML}
                
                <div class="form-grid-3-cols">
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Nome: <span style="color: #ef4444;">*</span>
                        </label>
                        <input type="text" id="admitNome" required placeholder="Nome completo" 
                               style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Idade: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="admitIdade" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.IDADE_OPTIONS.map(idade => `<option value="${idade}">${idade}</option>`).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            G√™nero: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="admitSexo" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.SEXO_OPTIONS.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Matr√≠cula:
                        </label>
                        <input type="text" id="admitMatricula" placeholder="00000-0" maxlength="7"
                               style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Conv√™nio: <span style="color: #ef4444;">*</span>
                        </label>
                        <input type="text" id="admitConvenio" required placeholder="Nome do conv√™nio"
                               style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Regi√£o: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="admitRegiao" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.REGIAO_OPTIONS.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            PPS: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="admitPPS" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.PPS_OPTIONS.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Previs√£o de Alta: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="admitPrevisaoAlta" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.PREVISAO_ALTA_OPTIONS.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Isolamento: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="admitIsolamento" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.ISOLAMENTO_OPTIONS.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
                        </select>
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <label style="display: flex; align-items: center; gap: 8px; cursor: pointer; padding: 10px; background: rgba(96,165,250,0.1); border-radius: 6px; margin-bottom: 15px;">
                        <input type="checkbox" id="admitSPICTBR" style="width: 18px; height: 18px; accent-color: #60a5fa;">
                        <span style="color: #e5e7eb; font-size: 14px; font-weight: 600;">SPICT-BR</span>
                    </label>
                </div>
                
                <div style="margin-top: 15px;">
                    <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                        Diretivas Antecipadas: <span style="color: #ef4444;">*</span>
                    </label>
                    <select id="admitDiretivas" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                        <option value="">Selecione...</option>
                        ${window.DIRETIVAS_OPTIONS.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
                    </select>
                </div>
                
                <div style="margin-top: 20px;">
                    <label style="display: block; color: #60a5fa; font-size: 14px; font-weight: 700; margin-bottom: 10px; border-bottom: 1px solid rgba(96,165,250,0.3); padding-bottom: 8px;">
                        Concess√µes (${window.CONCESSOES_LIST.length} op√ß√µes):
                    </label>
                    <div id="admitConcessoes" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px; max-height: 150px; overflow-y: auto; padding: 10px; background: rgba(255,255,255,0.02); border-radius: 6px;">
                        ${window.CONCESSOES_LIST.map(concessao => `
                            <label style="display: flex; align-items: center; gap: 8px; padding: 6px; cursor: pointer; border-radius: 4px; transition: background 0.2s;">
                                <input type="checkbox" name="concessao" value="${concessao}" style="width: 16px; height: 16px; accent-color: #60a5fa;">
                                <span style="color: #e5e7eb; font-size: 13px;">${concessao}</span>
                            </label>
                        `).join('')}
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <label style="display: block; color: #60a5fa; font-size: 14px; font-weight: 700; margin-bottom: 10px; border-bottom: 1px solid rgba(96,165,250,0.3); padding-bottom: 8px;">
                        Linhas de Cuidado (${window.LINHAS_CUIDADO_LIST.length} especialidades):
                    </label>
                    <div id="admitLinhas" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px; max-height: 200px; overflow-y: auto; padding: 10px; background: rgba(255,255,255,0.02); border-radius: 6px;">
                        ${window.LINHAS_CUIDADO_LIST.map(linha => `
                            <label style="display: flex; align-items: center; gap: 8px; padding: 6px; cursor: pointer; border-radius: 4px; transition: background 0.2s;">
                                <input type="checkbox" name="linha" value="${linha}" style="width: 16px; height: 16px; accent-color: #60a5fa;">
                                <span style="color: #e5e7eb; font-size: 13px;">${linha}</span>
                            </label>
                        `).join('')}
                    </div>
                </div>
                
                <div style="display: flex; gap: 12px; margin-top: 25px;">
                    <button onclick="closeModal('admissaoModal')" class="btn-secondary" style="flex: 1;">
                        Cancelar
                    </button>
                    <button onclick="admitirPaciente()" class="btn-primary" style="flex: 2;">
                        Confirmar Admiss√£o
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // Adicionar formata√ß√£o de matr√≠cula
    const inputMatricula = document.getElementById('admitMatricula');
    if (inputMatricula) {
        inputMatricula.addEventListener('input', function(e) {
            e.target.value = formatarMatricula(e.target.value);
        });
    }
    
    logSuccess('Modal de admiss√£o V3.3 aberto com sucesso');
}

// =================== FUN√á√ÉO: ABRIR MODAL DE ATUALIZA√á√ÉO ===================
function openAtualizacaoModal(hospitalId, numeroLeito) {
    logInfo(`Abrindo modal de atualiza√ß√£o - Hospital: ${hospitalId}, Leito: ${numeroLeito}`);
    
    const hospital = window.hospitalData[hospitalId];
    if (!hospital || !hospital.leitos) {
        logError('Dados do hospital n√£o encontrados');
        return;
    }
    
    const leito = hospital.leitos.find(l => l.numero === numeroLeito);
    if (!leito || leito.status !== 'OCUPADO') {
        logError('Leito n√£o est√° ocupado ou n√£o foi encontrado');
        return;
    }
    
    window.selectedLeito = { hospital: hospitalId, numero: numeroLeito };
    const hospitalNome = window.HOSPITAL_MAPPING[hospitalId] || 'Hospital';
    
    // Determinar se √© leito h√≠brido e se tem tipo fixo
    const isHospitalHibrido = window.HOSPITAIS_HIBRIDOS.includes(hospitalId);
    const tipoFixo = getTipoLeitoFixo(hospitalId, numeroLeito);
    const indicadorHibrido = isHospitalHibrido ? ' | LEITO H√çBRIDO' : '';
    
    // Campo Categoria (apenas para leitos h√≠bridos SEM tipo fixo)
    let campoCategoriaHTML = '';
    if (isHospitalHibrido && !tipoFixo) {
        const categoriaAtual = leito.categoriaEscolhida || '';
        campoCategoriaHTML = `
            <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                Categoria do Leito: <span style="color: #ef4444;">*</span>
            </label>
            <select id="editCategoria" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px; margin-bottom: 15px;">
                <option value="">Selecione...</option>
                ${window.TIPO_QUARTO_OPTIONS.map(opt => 
                    `<option value="${opt}" ${opt === categoriaAtual ? 'selected' : ''}>${opt}</option>`
                ).join('')}
            </select>
        `;
    }
    
    // Calcular tempo internado
    const tempoInternado = calcularTempoInternado(leito.dataAdmissao);
    
    const modalHTML = `
        <div class="modal-overlay" id="atualizacaoModal">
            <div class="modal-content" style="max-width: 900px; max-height: 90vh; overflow-y: auto;">
                <div style="color: #60a5fa; font-size: 14px; font-weight: 600; margin-bottom: 20px; text-align: left;">
                    Hospital: ${hospitalNome} | ID: ${leito.idLeito || '-'} | Leito: ${numeroLeito}${indicadorHibrido}
                </div>
                
                <h2 style="color: #60a5fa; margin-bottom: 20px; text-align: center;">Atualizar Paciente</h2>
                
                ${campoCategoriaHTML}
                
                <div class="form-grid-3-cols">
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Nome: <span style="color: #ef4444;">*</span>
                        </label>
                        <input type="text" id="editNome" required value="${leito.nome || ''}" 
                               style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Idade: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="editIdade" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.IDADE_OPTIONS.map(idade => 
                                `<option value="${idade}" ${idade == leito.idade ? 'selected' : ''}>${idade}</option>`
                            ).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            G√™nero: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="editSexo" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.SEXO_OPTIONS.map(opt => 
                                `<option value="${opt}" ${opt === leito.genero ? 'selected' : ''}>${opt}</option>`
                            ).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Matr√≠cula:
                        </label>
                        <input type="text" id="editMatricula" value="${leito.matricula || ''}" maxlength="7"
                               style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Conv√™nio: <span style="color: #ef4444;">*</span>
                        </label>
                        <input type="text" id="editConvenio" required value="${leito.convenio || ''}"
                               style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Regi√£o: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="editRegiao" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.REGIAO_OPTIONS.map(opt => 
                                `<option value="${opt}" ${opt === leito.regiao ? 'selected' : ''}>${opt}</option>`
                            ).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            PPS: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="editPPS" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.PPS_OPTIONS.map(opt => 
                                `<option value="${opt}" ${opt === leito.pps ? 'selected' : ''}>${opt}</option>`
                            ).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Previs√£o de Alta: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="editPrevisaoAlta" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.PREVISAO_ALTA_OPTIONS.map(opt => 
                                `<option value="${opt}" ${opt === leito.previsaoAlta ? 'selected' : ''}>${opt}</option>`
                            ).join('')}
                        </select>
                    </div>
                    
                    <div>
                        <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                            Isolamento: <span style="color: #ef4444;">*</span>
                        </label>
                        <select id="editIsolamento" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                            <option value="">Selecione...</option>
                            ${window.ISOLAMENTO_OPTIONS.map(opt => 
                                `<option value="${opt}" ${opt === leito.isolamento ? 'selected' : ''}>${opt}</option>`
                            ).join('')}
                        </select>
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <label style="display: flex; align-items: center; gap: 8px; cursor: pointer; padding: 10px; background: rgba(96,165,250,0.1); border-radius: 6px; margin-bottom: 15px;">
                        <input type="checkbox" id="editSPICTBR" ${leito.spictbr ? 'checked' : ''} style="width: 18px; height: 18px; accent-color: #60a5fa;">
                        <span style="color: #e5e7eb; font-size: 14px; font-weight: 600;">SPICT-BR</span>
                    </label>
                </div>
                
                <div style="margin-top: 15px;">
                    <label style="display: block; color: #e5e7eb; font-size: 13px; font-weight: 600; margin-bottom: 6px;">
                        Diretivas Antecipadas: <span style="color: #ef4444;">*</span>
                    </label>
                    <select id="editDiretivas" required style="width: 100%; padding: 10px; background: #374151; border: 1px solid rgba(255,255,255,0.1); border-radius: 6px; color: #ffffff; font-size: 14px;">
                        <option value="">Selecione...</option>
                        ${window.DIRETIVAS_OPTIONS.map(opt => 
                            `<option value="${opt}" ${opt === leito.diretivas ? 'selected' : ''}>${opt}</option>`
                        ).join('')}
                    </select>
                </div>
                
                <div style="margin-top: 20px;">
                    <label style="display: block; color: #60a5fa; font-size: 14px; font-weight: 700; margin-bottom: 10px; border-bottom: 1px solid rgba(96,165,250,0.3); padding-bottom: 8px;">
                        Concess√µes (${window.CONCESSOES_LIST.length} op√ß√µes):
                    </label>
                    <div id="editConcessoes" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px; max-height: 150px; overflow-y: auto; padding: 10px; background: rgba(255,255,255,0.02); border-radius: 6px;">
                        ${window.CONCESSOES_LIST.map(concessao => `
                            <label style="display: flex; align-items: center; gap: 8px; padding: 6px; cursor: pointer; border-radius: 4px; transition: background 0.2s;">
                                <input type="checkbox" name="concessao" value="${concessao}" 
                                       ${leito.concessoes && leito.concessoes.includes(concessao) ? 'checked' : ''}
                                       style="width: 16px; height: 16px; accent-color: #60a5fa;">
                                <span style="color: #e5e7eb; font-size: 13px;">${concessao}</span>
                            </label>
                        `).join('')}
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <label style="display: block; color: #60a5fa; font-size: 14px; font-weight: 700; margin-bottom: 10px; border-bottom: 1px solid rgba(96,165,250,0.3); padding-bottom: 8px;">
                        Linhas de Cuidado (${window.LINHAS_CUIDADO_LIST.length} especialidades):
                    </label>
                    <div id="editLinhas" style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px; max-height: 200px; overflow-y: auto; padding: 10px; background: rgba(255,255,255,0.02); border-radius: 6px;">
                        ${window.LINHAS_CUIDADO_LIST.map(linha => `
                            <label style="display: flex; align-items: center; gap: 8px; padding: 6px; cursor: pointer; border-radius: 4px; transition: background 0.2s;">
                                <input type="checkbox" name="linha" value="${linha}"
                                       ${leito.linhasCuidado && leito.linhasCuidado.includes(linha) ? 'checked' : ''}
                                       style="width: 16px; height: 16px; accent-color: #60a5fa;">
                                <span style="color: #e5e7eb; font-size: 13px;">${linha}</span>
                            </label>
                        `).join('')}
                    </div>
                </div>
                
                <div style="display: flex; gap: 12px; margin-top: 25px; align-items: center;">
                    <button onclick="darAlta('${hospitalId}', ${numeroLeito}, '${hospitalNome}')" class="btn-danger" style="flex: 1;">
                        Dar Alta
                    </button>
                    <div style="flex: 1; text-align: center; font-size: 11px; color: #9ca3af;">
                        <div>ADMISS√ÉO: ${leito.dataAdmissao || '-'}</div>
                        <div>INTERNADO: ${tempoInternado}</div>
                    </div>
                    <button onclick="atualizarPaciente()" class="btn-primary" style="flex: 1;">
                        Salvar
                    </button>
                    <button onclick="closeModal('atualizacaoModal')" class="btn-secondary" style="flex: 1;">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // Adicionar formata√ß√£o de matr√≠cula
    const inputMatricula = document.getElementById('editMatricula');
    if (inputMatricula) {
        inputMatricula.addEventListener('input', function(e) {
            e.target.value = formatarMatricula(e.target.value);
        });
    }
    
    logSuccess('Modal de atualiza√ß√£o V3.3 aberto com sucesso');
}

// =================== FUN√á√ÉO: FOR√áAR PR√â-MARCA√á√ÉO (CHECKLIST) ===================
function forcarPreMarcacao() {
    const concessoesObrigatorias = ['Transi√ß√£o Domiciliar'];
    
    concessoesObrigatorias.forEach(nomeConcessao => {
        const checkbox = document.querySelector(`input[name="concessao"][value="${nomeConcessao}"]`);
        if (checkbox && !checkbox.checked) {
            checkbox.checked = true;
            logInfo(`‚úÖ Concess√£o "${nomeConcessao}" pr√©-marcada automaticamente`);
        }
    });
}

// =================== FUN√á√ÉO: COLETAR DADOS DO FORMUL√ÅRIO ===================
function coletarDadosFormulario(prefixo) {
    const concessoesSelecionadas = Array.from(document.querySelectorAll(`#${prefixo}Concessoes input[type="checkbox"]:checked`))
        .map(cb => cb.value);
    
    const linhasSelecionadas = Array.from(document.querySelectorAll(`#${prefixo}Linhas input[type="checkbox"]:checked`))
        .map(cb => cb.value);
    
    const dados = {
        nome: document.getElementById(`${prefixo}Nome`)?.value || '',
        idade: document.getElementById(`${prefixo}Idade`)?.value || '',
        sexo: document.getElementById(`${prefixo}Sexo`)?.value || '',
        matricula: document.getElementById(`${prefixo}Matricula`)?.value || '',
        convenio: document.getElementById(`${prefixo}Convenio`)?.value || '',
        regiao: document.getElementById(`${prefixo}Regiao`)?.value || '',
        pps: document.getElementById(`${prefixo}PPS`)?.value || '',
        previsaoAlta: document.getElementById(`${prefixo}PrevisaoAlta`)?.value || '',
        isolamento: document.getElementById(`${prefixo}Isolamento`)?.value || '',
        spictbr: document.getElementById(`${prefixo}SPICTBR`)?.checked || false,
        diretivas: document.getElementById(`${prefixo}Diretivas`)?.value || '',
        concessoes: concessoesSelecionadas,
        linhasCuidado: linhasSelecionadas
    };
    
    // Adicionar categoria se existir (leitos h√≠bridos)
    const inputCategoria = document.getElementById(`${prefixo}Categoria`);
    if (inputCategoria) {
        dados.categoria = inputCategoria.value || '';
    }
    
    return dados;
}

// =================== FUN√á√ÉO: ADMITIR PACIENTE ===================
window.admitirPaciente = async function() {
    if (!window.selectedLeito) {
        logError('Nenhum leito selecionado');
        alert('Erro: Nenhum leito selecionado');
        return;
    }
    
    const dados = coletarDadosFormulario('admit');
    
    // Valida√ß√µes
    if (!dados.nome || !dados.idade || !dados.sexo || !dados.convenio || !dados.regiao || 
        !dados.pps || !dados.previsaoAlta || !dados.isolamento || !dados.diretivas) {
        alert('Por favor, preencha todos os campos obrigat√≥rios (*)');
        return;
    }
    
    // Valida√ß√£o especial para leitos h√≠bridos
    const isHospitalHibrido = window.HOSPITAIS_HIBRIDOS.includes(window.selectedLeito.hospital);
    const tipoFixo = getTipoLeitoFixo(window.selectedLeito.hospital, window.selectedLeito.numero);
    
    if (isHospitalHibrido && !tipoFixo && !dados.categoria) {
        alert('Por favor, selecione a categoria do leito (Apartamento ou Enfermaria)');
        return;
    }
    
    const payload = {
        acao: 'admitir',
        hospital: window.selectedLeito.hospital,
        numero: window.selectedLeito.numero,
        ...dados
    };
    
    logInfo('Enviando admiss√£o:', payload);
    
    try {
        const response = await enviarParaAPI(payload);
        
        if (response && response.success) {
            logSuccess('Paciente admitido com sucesso!');
            closeModal('admissaoModal');
            await fetchHospitalData();
        } else {
            logError('Erro na admiss√£o:', response);
            alert('Erro ao admitir paciente: ' + (response.message || 'Erro desconhecido'));
        }
    } catch (error) {
        logError('Erro ao admitir:', error);
        alert('Erro ao admitir paciente. Verifique o console.');
    }
};

// =================== FUN√á√ÉO: ATUALIZAR PACIENTE ===================
window.atualizarPaciente = async function() {
    if (!window.selectedLeito) {
        logError('Nenhum leito selecionado');
        alert('Erro: Nenhum leito selecionado');
        return;
    }
    
    const dados = coletarDadosFormulario('edit');
    
    // Valida√ß√µes
    if (!dados.nome || !dados.idade || !dados.sexo || !dados.convenio || !dados.regiao || 
        !dados.pps || !dados.previsaoAlta || !dados.isolamento || !dados.diretivas) {
        alert('Por favor, preencha todos os campos obrigat√≥rios (*)');
        return;
    }
    
    // Valida√ß√£o especial para leitos h√≠bridos
    const isHospitalHibrido = window.HOSPITAIS_HIBRIDOS.includes(window.selectedLeito.hospital);
    const tipoFixo = getTipoLeitoFixo(window.selectedLeito.hospital, window.selectedLeito.numero);
    
    if (isHospitalHibrido && !tipoFixo && !dados.categoria) {
        alert('Por favor, selecione a categoria do leito (Apartamento ou Enfermaria)');
        return;
    }
    
    const payload = {
        acao: 'atualizar',
        hospital: window.selectedLeito.hospital,
        numero: window.selectedLeito.numero,
        ...dados
    };
    
    logInfo('Enviando atualiza√ß√£o:', payload);
    
    try {
        const response = await enviarParaAPI(payload);
        
        if (response && response.success) {
            logSuccess('Paciente atualizado com sucesso!');
            closeModal('atualizacaoModal');
            await fetchHospitalData();
        } else {
            logError('Erro na atualiza√ß√£o:', response);
            alert('Erro ao atualizar paciente: ' + (response.message || 'Erro desconhecido'));
        }
    } catch (error) {
        logError('Erro ao atualizar:', error);
        alert('Erro ao atualizar paciente. Verifique o console.');
    }
};

// =================== FUN√á√ÉO: DAR ALTA ===================
window.darAlta = async function(hospitalId, numeroLeito, hospitalNome) {
    const confirmacao = confirm(`Confirma alta do paciente do leito ${numeroLeito} (${hospitalNome})?`);
    
    if (!confirmacao) {
        logInfo('Alta cancelada pelo usu√°rio');
        return;
    }
    
    const payload = {
        acao: 'darAlta',
        hospital: hospitalId,
        numero: numeroLeito
    };
    
    logInfo('Dando alta:', payload);
    
    try {
        const response = await enviarParaAPI(payload);
        
        if (response && response.success) {
            logSuccess('Alta realizada com sucesso!');
            
            // Fechar modal se estiver aberto
            const modal = document.getElementById('atualizacaoModal');
            if (modal) {
                closeModal('atualizacaoModal');
            }
            
            await fetchHospitalData();
        } else {
            logError('Erro na alta:', response);
            alert('Erro ao dar alta: ' + (response.message || 'Erro desconhecido'));
        }
    } catch (error) {
        logError('Erro ao dar alta:', error);
        alert('Erro ao dar alta. Verifique o console.');
    }
};

// =================== FUN√á√ÉO: FECHAR MODAL ===================
window.closeModal = function(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.remove();
        logInfo(`Modal ${modalId} fechado`);
    }
};

// =================== INJETAR CSS NO HEAD ===================
function injectStyles() {
    const style = document.createElement('style');
    style.textContent = `
        /* =================== CARDS V3.3 FINAL - LAYOUT MOCKUP =================== */
        
        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
            gap: 20px;
            padding: 20px;
        }
        
        .card {
            background: linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0.02) 100%);
            border-radius: 12px;
            padding: 18px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            border: 1px solid rgba(255,255,255,0.08);
        }
        
        .card-row {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 10px;
            margin-bottom: 10px;
        }
        
        .card-row-pessoa {
            display: grid;
            grid-template-columns: 100px 1fr;
            gap: 12px;
            margin-bottom: 10px;
        }
        
        .card-box {
            background: rgba(255,255,255,0.05);
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: 8px;
            padding: 10px;
            text-align: center;
        }
        
        .card-label {
            color: #9ca3af;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            margin-bottom: 4px;
            letter-spacing: 0.5px;
        }
        
        .card-value {
            color: #ffffff;
            font-size: 13px;
            font-weight: 600;
        }
        
        .pessoa-circle {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #60a5fa 0%, #3b82f6 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            box-shadow: 0 6px 20px rgba(96,165,250,0.4);
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background: rgba(255,255,255,0.08);
            color: white;
            border: 1px solid rgba(255,255,255,0.2);
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-secondary:hover {
            background: rgba(255,255,255,0.15);
            border-color: rgba(255,255,255,0.3);
            transform: translateY(-2px);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-danger:hover {
            background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
            box-shadow: 0 6px 20px rgba(239,68,68,0.4);
            transform: translateY(-2px);
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            backdrop-filter: blur(5px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            padding: 20px;
        }
        
        .modal-content {
            background: #1f2937;
            border-radius: 12px;
            padding: 30px;
            max-width: 900px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.5);
            border: 1px solid rgba(255,255,255,0.1);
        }

        input[type="text"],
        input[type="number"],
        textarea,
        select {
            width: 100%;
            padding: 10px;
            background: #374151 !important;
            border: 1px solid rgba(255,255,255,0.1) !important;
            border-radius: 6px !important;
            color: #ffffff !important;
            font-size: 14px;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }

        input[type="text"]:focus,
        input[type="number"]:focus,
        textarea:focus,
        select:focus {
            outline: none !important;
            border-color: #60a5fa !important;
            box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.2) !important;
        }

        select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23ffffff' d='M6 9L1 4h10z'/%3E%3C/svg%3E") !important;
            background-repeat: no-repeat;
            background-position: right 0.7rem center;
            background-size: 1em;
            padding-right: 2.5rem !important;
        }

        select option {
            background-color: #374151 !important;
            color: #ffffff !important;
        }

        select:focus {
            outline: none !important;
            border-color: #60a5fa !important;
            box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.2) !important;
        }

        input[type="checkbox"] {
            width: 16px;
            height: 16px;
            accent-color: #60a5fa;
            cursor: pointer;
        }
        
        label:has(input[type="checkbox"]) {
            cursor: pointer;
            transition: background-color 0.2s ease;
            border-radius: 4px;
            padding: 4px !important;
        }
        
        label:has(input[type="checkbox"]):hover {
            background-color: rgba(96, 165, 250, 0.1);
        }

        .card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .form-grid-3-cols {
            display: grid !important;
            grid-template-columns: 1fr 1fr 1fr !important;
            gap: 15px !important;
        }
        
        /* =================== TABLET (768px - 1024px) =================== */
        @media (max-width: 1024px) and (min-width: 769px) {
            .cards-grid {
                grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
                gap: 18px;
            }
            
            .form-grid-3-cols {
                grid-template-columns: 1fr 1fr 1fr !important;
                gap: 12px !important;
            }
        }

        /* =================== MOBILE (‚â§768px) =================== */
        @media (max-width: 768px) {
            .cards-grid {
                grid-template-columns: 1fr !important;
                gap: 15px !important;
            }
            
            .card-row,
            .card-row-pessoa {
                display: grid !important;
                grid-template-columns: 100px 1fr 1fr !important;
                gap: 8px !important;
            }
            
            .pessoa-circle {
                width: 100px !important;
                height: 100px !important;
            }
            
            .modal-overlay .modal-content {
                width: 95% !important;
                max-width: none !important;
                margin: 10px !important;
                max-height: 95vh !important;
                padding: 20px !important;
            }
            
            .form-grid-3-cols {
                display: grid !important;
                grid-template-columns: 1fr 1fr 1fr !important;
                gap: 8px !important;
            }
            
            .form-grid-3-cols input,
            .form-grid-3-cols select {
                padding: 8px 6px !important;
                font-size: 12px !important;
            }
            
            .form-grid-3-cols label {
                font-size: 10px !important;
                margin-bottom: 3px !important;
            }
            
            .modal-content div[id$="Concessoes"], 
            .modal-content div[id$="Linhas"] {
                grid-template-columns: 1fr !important;
                max-height: 120px !important;
            }
            
            input[type="checkbox"] {
                width: 18px !important;
                height: 18px !important;
                margin-right: 10px !important;
            }
            
            label:has(input[type="checkbox"]) {
                padding: 8px !important;
                font-size: 12px !important;
            }
        }
        
        /* =================== MOBILE PEQUENO (‚â§480px) =================== */
        @media (max-width: 480px) {
            .card {
                padding: 12px !important;
            }
            
            .card-row,
            .card-row-pessoa {
                gap: 6px !important;
            }
            
            .modal-content {
                padding: 15px !important;
            }
            
            .form-grid-3-cols {
                gap: 6px !important;
            }
        }
        
        /* =================== LANDSCAPE =================== */
        @media (max-width: 768px) and (orientation: landscape) {
            .cards-grid {
                grid-template-columns: repeat(2, 1fr) !important;
                gap: 12px !important;
            }
        }
    `;
    document.head.appendChild(style);
}

// =================== INICIALIZA√á√ÉO V3.3 FINAL ===================
document.addEventListener('DOMContentLoaded', function() {
    logSuccess('‚úÖ CARDS.JS V3.3 FINAL CARREGADO');
    
    // Verificar listas
    if (window.CONCESSOES_LIST.length !== 11) {
        logError(`ERRO: Esperadas 11 concess√µes, encontradas ${window.CONCESSOES_LIST.length}`);
    } else {
        logSuccess(`‚úÖ ${window.CONCESSOES_LIST.length} concess√µes confirmadas`);
    }
    
    if (window.LINHAS_CUIDADO_LIST.length !== 45) {
        logError(`ERRO: Esperadas 45 linhas, encontradas ${window.LINHAS_CUIDADO_LIST.length}`);
    } else {
        logSuccess(`‚úÖ ${window.LINHAS_CUIDADO_LIST.length} linhas de cuidado confirmadas`);
    }
    
    if (window.REGIAO_OPTIONS.length !== 9) {
        logError(`ERRO: Esperadas 9 regi√µes, encontradas ${window.REGIAO_OPTIONS.length}`);
    } else {
        logSuccess(`‚úÖ ${window.REGIAO_OPTIONS.length} regi√µes confirmadas`);
    }
    
    if (window.SEXO_OPTIONS.length !== 2) {
        logError(`ERRO: Esperadas 2 op√ß√µes sexo, encontradas ${window.SEXO_OPTIONS.length}`);
    } else {
        logSuccess(`‚úÖ ${window.SEXO_OPTIONS.length} op√ß√µes de g√™nero confirmadas (por extenso)`);
    }
    
    if (window.DIRETIVAS_OPTIONS.length !== 3) {
        logError(`ERRO: Esperadas 3 op√ß√µes diretivas, encontradas ${window.DIRETIVAS_OPTIONS.length}`);
    } else {
        logSuccess(`‚úÖ ${window.DIRETIVAS_OPTIONS.length} op√ß√µes de diretivas confirmadas (NOVO V3.3)`);
    }
    
    logInfo('üöÄ ESTRUTURA V3.3 FINAL (MOCKUP):');
    logInfo('  ‚Ä¢ ‚úÖ HEADER: Hospital fora dos boxes');
    logInfo('  ‚Ä¢ ‚úÖ LINHA 1: Leito | Tipo | Status');
    logInfo('  ‚Ä¢ ‚úÖ LINHA 2: G√™nero | Isolamento | Prev Alta');
    logInfo('  ‚Ä¢ ‚úÖ LINHA DIVIS√ìRIA horizontal');
    logInfo('  ‚Ä¢ ‚úÖ SE√á√ÉO PESSOA: C√≠rculo 100px + Grid 2x2');
    logInfo('  ‚Ä¢ ‚úÖ LINHA 3: PPS | SPICT-BR | DIRETIVAS ‚≠ê NOVO!');
    logInfo('  ‚Ä¢ ‚úÖ CORES ORIGINAIS: #1a1f2e + rgba(255,255,255,0.05)');
    logInfo('  ‚Ä¢ ‚úÖ C√≠rculo pessoa com cores: verde/azul/rosa');
    logInfo('  ‚Ä¢ ‚úÖ Badges com cores espec√≠ficas (isolamento/g√™nero/diretivas)');
    logInfo('  ‚Ä¢ ‚úÖ 74 colunas (A-BV) | BV/73 = DIRETIVAS');
    logInfo('  ‚Ä¢ ‚úÖ CSS responsivo completo inline');
    logInfo('  ‚Ä¢ ‚úÖ Valida√ß√µes obrigat√≥rias: isolamento + regi√£o + g√™nero');
});

// =================== EXPORTS ===================
window.createCard = createCard;
window.openAdmissaoModal = openAdmissaoModal;
window.openAtualizacaoModal = openAtualizacaoModal;
window.forcarPreMarcacao = forcarPreMarcacao;
window.coletarDadosFormulario = coletarDadosFormulario;
window.getBadgeIsolamento = getBadgeIsolamento;
window.getBadgeGenero = getBadgeGenero;
window.getBadgeDiretivas = getBadgeDiretivas;
window.formatarMatricula = formatarMatricula;

logSuccess('üéâ CARDS.JS V3.3 FINAL COMPLETO E PRONTO!');
logInfo('üìã RESUMO V3.3:');
logInfo('  ‚Ä¢ ‚úÖ Layout MOCKUP implementado 100%');
logInfo('  ‚Ä¢ ‚úÖ Hospital FORA dos boxes');
logInfo('  ‚Ä¢ ‚úÖ Linha divis√≥ria horizontal');
logInfo('  ‚Ä¢ ‚úÖ C√≠rculo pessoa 100px com SVG √≠cone');
logInfo('  ‚Ä¢ ‚úÖ DIRETIVAS na Linha 3 (coluna BV/73)');
logInfo('  ‚Ä¢ ‚úÖ PREV ALTA movida para Linha 2');
logInfo('  ‚Ä¢ ‚úÖ Cores originais do projeto (#1a1f2e)');
logInfo('  ‚Ä¢ ‚úÖ 11 concess√µes + 45 linhas + 9 regi√µes + 2 g√™neros + 3 diretivas');
logInfo('  ‚Ä¢ ‚úÖ TODO CSS responsivo consolidado');
logInfo('  ‚Ä¢ ‚úÖ 1600+ linhas completas do arquivo original');

// =================== LOG INICIALIZA√á√ÉO V3.3 CORRIGIDO ===================
console.log('‚úÖ CARDS.JS V3.3 COMPLETO CARREGADO!');
console.log('üìä 11 Concess√µes + 45 Linhas de Cuidado + Diretivas (BV/73)');
console.log('üè• Hospitais H√≠bridos:', window.HOSPITAIS_HIBRIDOS);
console.log('‚≠ê Corre√ß√µes aplicadas:');
console.log('   1. Box TIPO mostra categoria escolhida (coluna C)');
console.log('   2. Leitos h√≠bridos mostram indicador');
console.log('   3. Leitos fixos (H2, H4) bloqueados para edi√ß√£o');
console.log('   4. Header modal: info em linha √∫nica');
console.log('   5. Atualizar: layout organizado igual admitir');
console.log('   6. Atualizar: info admiss√£o + tempo internado nos bot√µes');
console.log('üìÅ Arquivo completo e funcional!');
